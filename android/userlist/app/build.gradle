plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.android.gms.oss-licenses-plugin'
}

android {
    namespace 'io.github.aidenkoog.android'
    compileSdk 33

    /* App signing key information */
    signingConfigs {
        aidenkoog {
            storeFile file('../keystore/android_aidenkoog_appkey.jks')
            storePassword "aidenkoog0000"
            keyAlias "android_aidenkoog"
            keyPassword "aidenkoog0000"
        }
    }

    defaultConfig {
        applicationId "io.github.aidenkoog.android"
        minSdk 30
        targetSdk 33
        /*
         * -----------------------------------------------------------------------------------------
         * major.minor.hotfix description
         * 1) major (feature) : feature adding
         * 2) minor (major) : critical modification
         * 3) hotfix
         * -----------------------------------------------------------------------------------------
         */
        versionCode 100
        versionName "1.0.0"
    }

    /* ---------------------------------------------------------------------------------------------
     * Build type
     * 1) release
     * 2) debug
     * 3) stage
     * --------------------------------------------------------------------------------------------*/
    buildTypes {
        release {
            applicationIdSuffix ""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.aidenkoog
            buildConfigField("String", "URL_DOMAIN_SSL", "\"\"")
            buildConfigField("String", "URL_DOMAIN_SSL_2", "\"\"")
            manifestPlaceholders = [appLabel: "Android Mobile App"]
        }
        debug {
            applicationIdSuffix ""
            signingConfig signingConfigs.aidenkoog
            buildConfigField("String", "URL_DOMAIN_SSL", "\"\"")
            buildConfigField("String", "URL_DOMAIN_SSL_2", "\"\"")
            manifestPlaceholders = [appLabel: "Android Mobile App DEV"]
        }
        stage {
            debuggable true
            applicationIdSuffix ""
            signingConfig signingConfigs.aidenkoog
            buildConfigField("String", "URL_DOMAIN_SSL", "\"\"")
            buildConfigField("String", "URL_DOMAIN_SSL_2", "\"\"")
            manifestPlaceholders = [appLabel: "Android Mobile App STAGE"]
        }
    }

    // Enable data binding option
    android.buildFeatures.dataBinding = true

    // Enable compose, viewBinding
    buildFeatures {
        viewBinding true
    }

    // Kotlin options.
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.tiles.ExperimentalHorologistTilesApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.compose.tools.ExperimentalHorologistComposeToolsApi"
    }

    /*
     * This data is combined with the build type data.
     * As a result, you can see the build variant below.
     * 1) krDebug, 2) krStage, 3) krRelease
     */
    flavorDimensions "destination"
    productFlavors {
        kr {
            dimension "destination"
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/atomicfu.kotlin_module']
        }
    }

    // APK file's name
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def project = "AndroidApp"
            def SEP = "_"
            def buildType = variant.buildType.name
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def date = new Date()
            def formattedDate = date.format('yyyyMMdd_HHmm')
            def newApkName = project + SEP + buildType.toUpperCase() + SEP + versionName + SEP + versionCode + SEP + formattedDate + ".apk"
            outputFileName = new File(newApkName)
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'

    // Constraint layout
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Rx-java
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.17'
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.8.0"

    // Room
    implementation 'androidx.room:room-runtime:2.5.1'
    implementation 'androidx.room:room-rxjava2:2.5.1'
    kapt 'androidx.room:room-compiler:2.5.1'

    // Hilt
    implementation "com.google.dagger:hilt-android:2.43.2"
    kapt "com.google.dagger:hilt-android-compiler:2.43.2"
    implementation 'androidx.hilt:hilt-work:1.0.0'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // Okhttp
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.8.1'

    // Multidex
    implementation 'androidx.multidex:multidex:2.0.1'

    // Logger
    implementation 'com.orhanobut:logger:2.2.0'

    // Lottie
    implementation 'com.airbnb.android:lottie:5.1.1'

    // Picasso
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Navigation UI
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'

    // Coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-guava:1.6.4"

    // Gson
    implementation 'com.google.code.gson:gson:2.9.0'

    // Bridge between futures and coroutines
    implementation 'com.google.guava:guava:30.1.1-android'
    implementation "androidx.concurrent:concurrent-futures-ktx:1.1.0"

    // Testing
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")

    // Datastore
    implementation 'androidx.datastore:datastore-preferences:1.0.0'

    // Lifecycle
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'

    // License
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.1'

    // work (to fix issue (Targeting S+ (version 31 and above) requires that one of FLAG_IMMUTABLE..)
    implementation 'androidx.work:work-runtime:2.8.1'
}
